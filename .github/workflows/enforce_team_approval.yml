name: Enforce Team-Based Approvals

on:
  pull_request:
    branches:
      - develop  # This workflow applies only for PRs merging into develop
    types: [review_requested, submitted, edited, opened]

jobs:
  check-approvals:
    runs-on: ubuntu-latest
    steps:
      - name: Get PR Approvals
        id: approvals
        run: |
          # Extract the PR number from the event JSON
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo "PR Number: $PR_NUMBER"
          
          # Fetch reviews for the PR
          REVIEWS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                     -H "Accept: application/vnd.github.v3+json" \
                     "https://api.github.com/repos/hdfcorg/hdfc/pulls/$PR_NUMBER/reviews")
          echo "$REVIEWS" > reviews.json
          echo "Fetched PR Reviews Successfully."

      - name: Debug PR Approvals
        run: cat reviews.json  # Print reviews for debugging

      - name: Validate Approvers from Different Teams
        id: validate_teams
        run: |
          ORGANIZATION="hdfcorg"
          TEAM_A="teamahdfc"
          TEAM_B="teambsidgs"

          TEAM_A_APPROVED=0
          TEAM_B_APPROVED=0

          # Fetch team members for both teams
          TEAM_A_MEMBERS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                                  -H "Accept: application/vnd.github.v3+json" \
                                  "https://api.github.com/orgs/$ORGANIZATION/teams/$TEAM_A/members" | jq -r '.[].login')
          TEAM_B_MEMBERS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                                  -H "Accept: application/vnd.github.v3+json" \
                                  "https://api.github.com/orgs/$ORGANIZATION/teams/$TEAM_B/members" | jq -r '.[].login')

          echo "Team A Members: $TEAM_A_MEMBERS"
          echo "Team B Members: $TEAM_B_MEMBERS"

          # Loop through the approved users in the PR and check team membership
          for USER in $(jq -r '.[] | select(.state=="APPROVED") | .user.login' reviews.json); do
            echo "Checking approval from: $USER"
            
            if echo "$TEAM_A_MEMBERS" | grep -qw "$USER"; then
              TEAM_A_APPROVED=1
              echo "$USER is in Team A"
            fi
            if echo "$TEAM_B_MEMBERS" | grep -qw "$USER"; then
              TEAM_B_APPROVED=1
              echo "$USER is in Team B"
            fi
          done

          # Enforce rule: one approval from each team is required
          if [[ $TEAM_A_APPROVED -eq 0 || $TEAM_B_APPROVED -eq 0 ]]; then
            echo "❌ Error: One approval from each team is required!"
            exit 1
          else
            echo "✅ Approvals from both teams are verified."
          fi

      - name: Block Merge if Conditions Fail
        if: failure()
        run: |
          echo "❌ Merge is blocked. Approvals from both teams are required."
          exit 1

  request_reviewers:
    runs-on: ubuntu-latest
    steps:
      - name: Request Reviewers
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/hdfcorg/hdfc/pulls/$PR_NUMBER/requested_reviewers" \
               -d '{"team_reviewers": ["teamahdfc", "teambsidgs"]}'
